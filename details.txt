[mcache]
 Directives for caching in both requests and responses.
 Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control

[mcsd]
 Clears browsing data (cookies, storage, cache) associated with the requesting website.
 Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Clear-Site-Data

[mcsp]
 Helps to detect and mitigate Cross Site Scripting (XSS) and data injection attacks, among others.
 Ref: https://content-security-policy.com/
 
[mexpect]
 For reporting/enforcement of Certificate Transparency requirements, preventing the use of misissued certificates from going unnoticed.
 Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT

[mfeature]
 Allow and deny the use of browser features.
 Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy

[mnel]
 Enables web applications to declare a reporting policy that can be used to report network or application errors.
 Ref: https://scotthelme.co.uk/network-error-logging-deep-dive/

[mpragma]
 For backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
 Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Pragma

[mreferrer]
 Controls how much referrer information (sent via the Referer header) should be included with requests.
 Ref: https://scotthelme.co.uk/a-new-security-header-referrer-policy/

[msts]
 Lets a web site tell browsers that it should only be accessed using HTTPS, instead of using HTTP.
 Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security

[mxcto]
 Indicate that the MIME types advertised in the Content-Type headers should not be changed and be followed.
 Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options

[mxfo]
 Indicate whether or not a browser should be allowed to render a page in a <frame>, <iframe>, <embed> or <object>.
 Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options

[mxxp]
 Stops pages from loading when they detect reflected cross-site scripting (XSS) attacks.
 Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection

[icache]
 Use 'no-cache', 'no-store', and 'must-revalidate' if there are sensitive data or private resources in the domain.

[icsp]
 Remove 'unsafe-inline' and/or 'unsafe-eval' whenever possible, by moving inline code to .js/.css files or using nonces/hashes.

[ifpol]
 The value '*' allows the feature in this document, and all nested browsing contexts (iframes) regardless of their origin.

[iref]
 Use 'strict-origin' or 'strict-origin-when-cross-origin' if there are sensitive or private resources in the domain.
 Otherwise fallback to 'no-referrer-when-downgrade' (default browser behaviour) or even 'no-referrer' if is not required.

[iset]
 Use 'secure' and 'httponly' to ensure that cookies are sent securely and are not accessed by unintended parties or scripts.

[ists]
 It is recommended to add 'includeSubDomains' and define 'max-age' equal or greater than 31536000 (seconds = 1 year).

[ixcd]
 Set this header as restrictively as possible; the value 'all' could permit any cross-domain requests from Flash and PDF documents.

[ixxp]
 Use '1; mode=block' in order to enable cross-site scripting filter and prevent rendering the page if an attack is detected.

[afgp]
 Change these values, or remove the headers, if any of them identify real software/version:

[aisc]
 All, or any of the values in these headers could be considered insecure; check the following advices:

